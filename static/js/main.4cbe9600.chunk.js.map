{"version":3,"sources":["logo.svg","PingPong.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","_ref","children","props","Object","objectWithoutProperties","react_default","a","createElement","Message","_ref2","PingPong","state","counter","messages","onSend","request","text","concat","_this","then","data","console","log","add","map","_ref3","setTimeout","setState","onClear","_this2","this","_ref4","_this3","_this$state","PingPong_Button","onClick","message","key","PingPong_Message","Component","App","className","src","logo","alt","href","target","rel","PingPong_PingPong","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8QCGlCC,EAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAaC,EAAhBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,qBACbK,EAAAC,EAAAC,cAAA,SAAYL,EAAQD,IAGhBO,EAAU,SAAAC,GAAA,IAAGR,EAAHQ,EAAGR,SAAH,OACdI,EAAAC,EAAAC,cAAA,WAAMN,IAGaS,6MACnBC,MAAQ,CACNC,QAAS,EACTC,SAAU,MAYZC,OAAS,kBAAMC,kBAAQ,OAAD,4HAMlB,CAAEC,KAAI,YAAAC,OAAcC,EAAKP,MAAMC,WAAaO,KAAK,SAAAC,GAAI,OACvDC,QAAQC,IAAIF,IAASA,EAAKZ,QAAQe,IAAIC,IAAI,SAAAC,GAAA,OAAAA,EAAET,SAAiBG,KAAK,SAAAN,GAAQ,OAC1Ea,WAAW,kBAAMR,EAAKS,SAAS,CAAEf,QAASM,EAAKP,MAAMC,QAAU,EAAGC,cAAa,UAEjFe,QAAU,kBAAMb,kBAAQ,OAAD,oDAIrBI,KAAK,SAAAC,GAAI,OACTC,QAAQC,IAAIF,KAAOD,KAAK,kBACxBO,WAAW,kBAAMR,EAAKS,SAAS,CAAEd,SAAU,MAAM,2FA1B/B,IAAAgB,EAAAC,KAClBf,kBAAQ,OAAD,qDAIHI,KAAK,SAAAC,GAAI,OACXC,QAAQC,IAAIF,IAASA,EAAKP,SAASW,IAAI,SAAAO,GAAA,OAAAA,EAAEf,SAAiBG,KAAK,SAAAN,GAAQ,OACvEa,WAAW,kBAAMG,EAAKF,SAAS,CAAEd,cAAa,wCAqBrC,IAAAmB,EAAAF,KAAAG,EACmBH,KAAKnB,MAA3BC,EADGqB,EACHrB,QAASC,EADNoB,EACMpB,SACjB,OACER,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAD,CAAQC,QAAS,kBAAMH,EAAKlB,WAA5B,mBAAuDF,IAEzDP,EAAAC,EAAAC,cAAA,WACCM,EAASW,IAAI,SAACY,EAASC,GAAV,OACZhC,EAAAC,EAAAC,cAAC+B,EAAD,CAASD,IAAKA,GAAMD,MAGtB/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAD,CAAQC,QAAS,kBAAMH,EAAKJ,YAA5B,2BA9C8BW,aCkBvBC,mLAtBX,OACEnC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACbpC,EAAAC,EAAAC,cAAA,UAAQkC,UAAU,cAChBpC,EAAAC,EAAAC,cAAA,OAAKmC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCvC,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEkC,UAAU,WACVI,KAAK,iBACLC,OAAO,SACPC,IAAI,uBAJN,kBAQA1C,EAAAC,EAAAC,cAACyC,EAAD,eAjBQT,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.4cbe9600.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { request } from 'graphql-request'\n\nconst Button = ({ children, ...props }) => (\n  <button {...props}>{children}</button>\n);\n\nconst Message = ({ children }) => (\n  <div>{children}</div>\n);\n\nexport default class PingPong extends Component {\n  state = {\n    counter: 1,\n    messages: []\n  };\n  componentDidMount() {\n    request('/api', `{\n      messages {\n        text\n      }\n    }`).then(data =>\n      console.log(data) || data.messages.map(({text}) => text)).then(messages => \n      setTimeout(() => this.setState({ messages }), 800)\n    )\n  }\n  onSend = () => request('/api', `mutation($text: String!) {\n      Message {\n        add(input: {text: $text}) {\n          text\n        }\n      }\n  }`, { text: `Message #${this.state.counter}` }).then(data =>\n    console.log(data) || data.Message.add.map(({text}) => text)).then(messages => \n    setTimeout(() => this.setState({ counter: this.state.counter + 1, messages }), 800)\n  );\n  onClear = () => request('/api', `mutation {\n    Message {\n      clear\n    }\n}`).then(data =>\n    console.log(data)).then(() => \n    setTimeout(() => this.setState({ messages: []}), 200)\n  );\n      render() {\n    const { counter, messages } = this.state;\n    return (\n      <div>\n      <div>\n        <Button onClick={() => this.onSend()}>Create message #{counter}</Button>\n      </div>\n      <div>\n      {messages.map((message, key) => (\n        <Message key={key}>{message}</Message>\n      ))}\n      </div>\n      <div>\n        <Button onClick={() => this.onClear()}>Clear messages</Button>\n      </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PingPong from \"./PingPong\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"/stack/schema/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            GraphQL Schema\n          </a>\n          <PingPong />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}